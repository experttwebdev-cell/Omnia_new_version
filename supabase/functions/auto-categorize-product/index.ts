import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "npm:@supabase/supabase-js@2.38.1";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
};

interface CategorizeRequest {
  productId?: string;
  title?: string;
  description?: string;
}

interface CategorizeResponse {
  success: boolean;
  google_product_category?: string;
  error?: string;
}

async function callDeepSeek(title: string, description: string): Promise<string> {
  const deepseekApiKey = Deno.env.get('DEEPSEEK_API_KEY');

  if (!deepseekApiKey) {
    throw new Error('DeepSeek API key not configured');
  }

  console.log('üìû Calling DeepSeek API for categorization...');
  console.log('üì¶ Product title:', title);

  const cleanDescription = description
    ? description.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim().substring(0, 500)
    : 'Aucune description';

  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${deepseekApiKey}`,
    },
    body: JSON.stringify({
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: `Tu es un expert e-commerce en taxonomie produit Google Shopping.

Ta mission : √† partir du titre et de la description d'un produit, d√©duis la cat√©gorie Google Product Category la plus pr√©cise possible, en fran√ßais.

R√àGLES STRICTES:
1. Utilise EXACTEMENT la hi√©rarchie Google Shopping officielle
2. S√©pare les niveaux avec " > "
3. Donne UNIQUEMENT la cha√Æne de cat√©gorie, sans commentaire ni phrase
4. Sois aussi PR√âCIS que possible (va jusqu'au dernier niveau si possible)
5. Utilise le fran√ßais pour toutes les cat√©gories

EXEMPLES DE CAT√âGORIES VALIDES:
- "Meubles > Mobilier de salon > Canap√©s > Canap√©s d'angle"
- "Meubles > Armoires et meubles de rangement > Casiers et armoires de rangement"
- "Meubles > Tables > Tables basses"
- "Meubles > Chaises > Chaises de salle √† manger"
- "Maison et jardin > √âclairage > Lampes de table"
- "Meubles > Lits et accessoires > Cadres de lit"
- "Meubles > Buffets et bahuts"
- "Meubles > Mobilier de bureau > Bureaux"
- "Meubles > √âtag√®res et biblioth√®ques"
- "Meubles > Tables > Tables √† manger"
- "Meubles > Fauteuils"
- "Meubles > Mobilier de jardin > Tables de jardin"
- "Meubles > Mobilier de jardin > Chaises de jardin"
- "Maison et jardin > D√©coration > Miroirs"
- "Maison et jardin > D√©coration > Tapis"

Ne donne QUE la cat√©gorie, rien d'autre.`,
        },
        {
          role: 'user',
          content: `Titre : ${title}\nDescription : ${cleanDescription}`,
        },
      ],
      temperature: 0.3,
      max_tokens: 100,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
  }

  const data = await response.json();
  const category = data.choices[0].message.content.trim();

  // Nettoyer la r√©ponse (enlever les guillemets, etc.)
  const cleanedCategory = category
    .replace(/^"|"$/g, '') // Enlever guillemets d√©but/fin
    .replace(/^'|'$/g, '')   // Enlever apostrophes d√©but/fin
    .replace(/^Cat√©gorie:\s*/i, '') // Enlever "Cat√©gorie: "
    .replace(/^R√©ponse:\s*/i, '') // Enlever "R√©ponse: "
    .trim();

  console.log('‚úÖ Category detected:', cleanedCategory);
  return cleanedCategory;
}

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  console.log('üè∑Ô∏è === AUTO-CATEGORIZE PRODUCT ==="');

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const serviceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !serviceRoleKey) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Supabase configuration missing',
        }),
        {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    const requestBody: CategorizeRequest = await req.json();
    const { productId, title, description } = requestBody;

    let productTitle = title;
    let productDescription = description;

    // Si productId fourni, r√©cup√©rer les donn√©es depuis la DB
    if (productId) {
      console.log('üì¶ Fetching product from database:', productId);
      const supabaseClient = createClient(supabaseUrl, serviceRoleKey);

      const { data, error } = await supabaseClient
        .from('shopify_products')
        .select('title, description')
        .eq('id', productId)
        .maybeSingle();

      if (error || !data) {
        return new Response(
          JSON.stringify({
            success: false,
            error: 'Product not found',
          }),
          {
            status: 404,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          }
        );
      }

      productTitle = data.title;
      productDescription = data.description || '';
    }

    if (!productTitle) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Product title is required',
        }),
        {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        }
      );
    }

    // Appeler DeepSeek pour cat√©goriser
    const googleProductCategory = await callDeepSeek(
      productTitle,
      productDescription || ''
    );

    // Si productId fourni, mettre √† jour la DB
    if (productId) {
      console.log('üíæ Updating product category in database...');
      const supabaseClient = createClient(supabaseUrl, serviceRoleKey);

      const { error: updateError } = await supabaseClient
        .from('shopify_products')
        .update({
          google_product_category: googleProductCategory,
          updated_at: new Date().toISOString(),
        })
        .eq('id', productId);

      if (updateError) {
        console.error('‚ùå Database update failed:', updateError);
        return new Response(
          JSON.stringify({
            success: false,
            error: 'Failed to update product category',
          }),
          {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          }
        );
      }

      console.log('‚úÖ Product category updated successfully');
    }

    return new Response(
      JSON.stringify({
        success: true,
        google_product_category: googleProductCategory,
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('üí• Error in auto-categorize:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});